(defdomain microrts (

  (:attachments
    (adjacent ?x1 ?y1 ?x2 ?y2 ?gx ?gy ?width ?height)
    (in_range ?x ?y ?ax ?ay ?tx ?ty ?range ?width ?height)
  )

  (:operator (!move ?unit ?x ?y ?nx ?ny)
    ((unit ?unit ?x ?y) (not (occupied ?nx ?ny)))
    ((unit ?unit ?x ?y) (occupied ?x ?y))
    ((unit ?unit ?nx ?ny) (occupied ?nx ?ny))
  )

  (:operator (!attack ?attacker ?ax ?ay ?target ?tx ?ty ?health ?damage)
    (
      (unit ?attacker ?ax ?ay)
      (unit ?target ?tx ?ty)
      (health ?target ?health)
      (damage ?attacker ?damage)
    )
    ((health ?target ?health))
    ((health ?target (call - ?health ?damage)))
  )

  (:operator (!harvest ?unit ?x ?y ?resource ?rx ?ry)
    ((unit ?unit ?x ?y) (source ?resource ?rx ?ry))
    ()
    ((carrying ?unit ?resource))
  )

  (:operator (!return ?unit ?x ?y ?base ?bx ?by ?resource)
    ((unit ?unit ?x ?y) (base ?base ?bx ?by))
    ((carrying ?unit ?resource))
    ((loaded ?base))
  )

  (:operator (!produce ?base ?x ?y ?unit ?ux ?uy)
    ((base ?base ?x ?y) (not (occupied ?ux ?uy)))
    ((loaded ?base))
    ((unit ?unit ?ux ?uy) (occupied ?ux ?uy))
  )

  (:operator (!!visit ?unit ?x ?y)
    ()
    ()
    ((visited ?unit ?x ?y))
  )

  (:operator (!!unvisit ?unit ?x ?y)
    ()
    ((visited ?unit ?x ?y))
    ()
  )

  (:operator  (!!remove ?target ?tx ?ty)
    ()
    ((unit ?target ?tx ?ty) (occupied ?tx ?ty))
    ()
  )

  (:method (forward ?unit ?gx ?gy ?width ?height)
    base
    ((unit ?unit ?gx ?gy))
    ()

    recursion
    (
      (unit ?unit ?x ?y)
      (adjacent ?x ?y ?nx ?ny ?gx ?gy ?width ?height)
      (not (visited ?unit ?nx ?ny))
    )
    (
      (!move ?unit ?x ?y ?nx ?ny)
      (!!visit ?unit ?x ?y)
      (forward ?unit ?gx ?gy ?width ?height)
      (!!unvisit ?unit ?x ?y)
    )
  )

  (:method (destroy ?attacker ?ax ?ay ?target ?tx ?ty ?health ?damage)
    base
    ((call <= ?health 0))
    (
      (!!remove ?target ?tx ?ty)
    )

    recursion
    ((call > ?health 0))
    (
      (!attack ?attacker ?ax ?ay ?target ?tx ?ty ?health ?damage)
      (destroy ?attacker ?ax ?ay ?target ?tx ?ty (call - ?health ?damage) ?damage)
    )
  )

  (:method (go-destroy ?attacker ?target)
    in-range
    (
      (range ?attacker ?range)
      (unit ?attacker ?ax ?ay)
      (unit ?target ?tx ?ty)
      (damage ?attacker ?damage)
      (health ?target ?health)
      (call <= (call hypot_diff ?ax ?ay ?tx ?ty) ?range)
      ; Same as (call <= (call ^ (call + (call ^ (call - ?ax ?tx) 2) (call ^ (call - ?ay ?ty) 2)) 0.5) ?range)
    )
    (
      (destroy ?attacker ?ax ?ay ?target ?tx ?ty ?health ?damage)
    )

    not-in-range
    (
      (grid ?width ?height)
      (unit ?attacker ?ax ?ay)
      (unit ?target ?tx ?ty)
      (range ?attacker ?range)
      (damage ?attacker ?damage)
      (health ?target ?health)
      (in_range ?x ?y ?ax ?ay ?tx ?ty ?range ?width ?height)
      (not (occupied ?x ?y))
    )
    (
      (forward ?attacker ?x ?y ?width ?height)
      (destroy ?attacker ?x ?y ?target ?tx ?ty ?health ?damage)
    )
  )

  (:method (build ?new)
    (
      (grid ?width ?height)
      (unit ?unit ?x ?y)
      (source ?resource ?rx ?ry)
      (adjacent ?rx ?ry ?arx ?ary ?x ?y ?width ?height)
      (base ?base ?bx ?by)
      (adjacent ?bx ?by ?abx ?aby ?arx ?ary ?width ?height)
      (adjacent ?bx ?by ?nx ?ny ?bx ?by ?width ?height)
      (call != ?abx ?nx)
      (call != ?aby ?ny)
    )
    (
      (forward ?unit ?arx ?ary ?width ?height)
      (!harvest ?unit ?arx ?ary ?resource ?rx ?ry)
      (forward ?unit ?abx ?aby ?width ?height)
      (!return ?unit ?abx ?aby ?base ?bx ?by ?resource)
      (!produce ?base ?bx ?by ?new ?nx ?ny)
    )
  )
))